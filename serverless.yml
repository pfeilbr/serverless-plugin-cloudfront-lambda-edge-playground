service: pfeil-static-site

custom:
  defaultRegion: us-east-1
  defaultEnvironmentGroup: dev
  region: ${opt:region, self:custom.defaultRegion}
  stage: ${opt:stage, env:USER}
  objectPrefix: "${self:service}-${self:custom.stage}"

plugins:
  - "@silvermine/serverless-plugin-cloudfront-lambda-edge"
  - serverless-pseudo-parameters

package:
  exclude:
    - "node_modules/**"

provider:
  name: aws
  runtime: nodejs8.10 # Because this runs on CloudFront (lambda@edge) it must be 8.10 or greater
  region: ${self:custom.region}
  stage: ${self:custom.stage}

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "secretsmanager:GetSecretValue"
      Resource: "arn:aws:secretsmanager:#{AWS::Region}:#{AWS::AccountId}:secret:dev/pfeil-static-site-pfeilbr/users-*"

  # Note that Lambda@Edge does not actually support environment variables for lambda
  # functions, but the plugin will strip the environment variables from any function
  # that has edge configuration on it
  environment:
    SLS_SVC_NAME: ${self:service}
    SLS_STAGE: ${self:custom.stage}

functions:
  directoryRootOriginRequestRewriter:
    name: "${self:custom.objectPrefix}-origin-request"
    handler: index.handler
    memorySize: 128
    timeout: 5
    lambdaAtEdge:
      distribution: "WebsiteDistribution"
      eventType: "viewer-request"

resources:
  Resources:
    WebsiteBucket:
      Type: "AWS::S3::Bucket"
      Properties:
        BucketName: "${self:custom.objectPrefix}"
        AccessControl: "Private"
        WebsiteConfiguration:
          IndexDocument: "index.html"
          ErrorDocument: "404.html"
    WebsiteDistribution:
      Type: "AWS::CloudFront::Distribution"
      Properties:
        DistributionConfig:
          DefaultCacheBehavior:
            TargetOriginId: "WebsiteBucketOrigin"
            ViewerProtocolPolicy: "redirect-to-https"
            DefaultTTL: 600 # ten minutes
            MaxTTL: 600 # ten minutes
            Compress: true
            ForwardedValues:
              QueryString: false
              Cookies:
                Forward: "none"
          DefaultRootObject: "index.html"
          Enabled: true
          PriceClass: "PriceClass_100"
          HttpVersion: "http2"
          ViewerCertificate:
            CloudFrontDefaultCertificate: true
          Origins:
            - Id: "WebsiteBucketOrigin"
              DomainName: { "Fn::GetAtt": ["WebsiteBucket", "DomainName"] }
              S3OriginConfig:
                OriginAccessIdentity:
                  Fn::Join:
                    - ""
                    - - "origin-access-identity/cloudfront/"
                      - Ref: "CloudFrontOriginAccessIdentity"
              ## In case you want to restrict the bucket access use S3OriginConfig and remove CustomOriginConfig
              # S3OriginConfig:
              #   OriginAccessIdentity: origin-access-identity/cloudfront/E127EXAMPLE51Z

    CloudFrontOriginAccessIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: "${self:custom.objectPrefix}"

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref WebsiteBucket
        PolicyDocument:
          Statement:
            - Action:
                - s3:GetObject
              Effect: Allow
              Resource:
                Fn::Join:
                  - ""
                  - - "arn:aws:s3:::"
                    - Ref: "WebsiteBucket"
                    - "/*"
              Principal:
                CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId
